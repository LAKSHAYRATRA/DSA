/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    private:
    void marks_parents(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parents){
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();
            if(front->left){
                parents[front->left]=front;
                q.push(front->left);
            }
            if(front->right){
                parents[front->right]=front;
                q.push(front->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>parents;
        marks_parents(root,parents);
        queue<TreeNode*>q;
        int distance=0;
        q.push(target);
        unordered_map<TreeNode*,bool>visited;
        visited[target] = true;
        while(!q.empty()){
            if(distance==k)break;
            int size = q.size(); 
            for (int i = 0; i < size; i++) {
                TreeNode* front=q.front();
                q.pop();
                if(front->left&&!visited[front->left]){
                    q.push(front->left);
                    visited[front->left]=true;
                }
                if(front->right&&!visited[front->right]){
                    q.push(front->right);
                    visited[front->right]=true;
                }
                if(parents.find(front)!=parents.end()&&!visited[parents[front]]){
                    q.push(parents[front]);
                    visited[parents[front]]=true;

                }
            }
            distance++;
        }
        vector<int>ans;
        while (!q.empty()) {
            ans.push_back(q.front()->val);
            q.pop();
        }

        return ans;
    }
};
