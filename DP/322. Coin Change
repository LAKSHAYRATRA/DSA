class Solution {
    // private:
    // int min_coins(vector<int>&coins,int amount,int n,vector<vector<int>>&dp){
    //     if(amount==0)return 0;
    //     if(n==0){
    //         if(amount%coins[0]==0)return amount/coins[0];
    //         else return INT_MAX;
    //     }
    //     if(dp[n][amount]!=-1)return dp[n][amount];
    //     int pick=INT_MAX;
    //     if(coins[n]<=amount){
    //     int result = min_coins(coins, amount - coins[n], n,dp);
    //         if (result != INT_MAX) {
    //             pick = 1 + result;
    //         }
    //     }
    //     int not_pick=min_coins(coins,amount,n-1,dp);
    //     return dp[n][amount]=min(pick,not_pick);

    // }




public:
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>>dp(n,vector<int>(amount+1,0));
        for(int i=0;i<n;i++){
            dp[i][0]=0;
        }
        for(int i=1;i<=amount;i++){
            if(i%coins[0]==0){
                dp[0][i]=i/coins[0];
            }
            else dp[0][i]=INT_MAX;
        }
        for(int i=1;i<n;i++){
            for(int j=1;j<=amount;j++){
                int not_pick=dp[i-1][j];
                int pick=INT_MAX;
                if(coins[i]<=j){
                int result =dp[i][j-coins[i]];
                if (result != INT_MAX) {
                pick = 1 + result;
                }
                }
                dp[i][j]=min(pick,not_pick);
            }
        }
        int ans=dp[n-1][amount];
        if(ans==INT_MAX)return -1;

        return ans;
    }
};
// class Solution {
// private:
//     int min_coins(vector<int>& coins, int amount, int n) {
//         // Base case: if amount is 0, no coins are needed
//         if (amount == 0) return 0;
//         // If there are no coins left or amount becomes negative
//         if (n < 0) return INT_MAX; 

//         // Option 1: Include the coin[n]
//         int pick = INT_MAX;
//         if (coins[n] <= amount) {
            // int result = min_coins(coins, amount - coins[n], n);
            // if (result != INT_MAX) { // Check to avoid overflow
            //     pick = 1 + result;
            // }
//         }

//         // Option 2: Exclude the coin[n]
//         int not_pick = min_coins(coins, amount, n - 1);

//         // Return the minimum of picking or not picking the coin
//         return min(pick, not_pick);
//     }
// public:
//     int coinChange(vector<int>& coins, int amount) {
//         int n = coins.size();
//         int ans = min_coins(coins, amount, n - 1);
//         return (ans == INT_MAX) ? -1 : ans; // Return -1 if no solution found
//     }
// };
