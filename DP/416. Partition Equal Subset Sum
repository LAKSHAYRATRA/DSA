class Solution {
    private:
    bool check(vector<int>nums,int n,int target,vector<vector<int>>&dp){
        if(target==0)return true;
        if(n==0){
            return (target==nums[0]);
        }
        if(dp[n][target]!=-1){
            return dp[n][target];
        }
        bool not_take=check(nums,n-1,target,dp);
        bool take=false;
        if(nums[n]<=target){
            take=check(nums,n-1,target-nums[n],dp);
        }
        return dp[n][target]=take||not_take;
        
    }
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum%2==1)return false;
        vector<vector<int>>dp(n,vector<int>((sum/2)+1,-1));
        return check(nums,n-1,sum/2,dp);
    }
};
