class Solution {
private:
    bool dfs(int i, vector<vector<int>>& adjList, vector<int>& visited, vector<int>& pathVisited) {
        visited[i] = 1;
        pathVisited[i] = 1;

        for (int neighbor : adjList[i]) {
            if (!visited[neighbor]) {
                if (!dfs(neighbor, adjList, visited, pathVisited)) {
                    return false;
                }
            } else if (pathVisited[neighbor]) {
                // Cycle detected
                return false;
            }
        }

        pathVisited[i] = 0;  // backtrack
        return true;
    }

public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adjList(numCourses);
        for (const auto& pre : prerequisites) {
            adjList[pre[1]].push_back(pre[0]);
        }

        vector<int> visited(numCourses, 0);
        vector<int> pathVisited(numCourses, 0);

        for (int i = 0; i < numCourses; ++i) {
            if (!visited[i]) {
                if (!dfs(i, adjList, visited, pathVisited)) {
                    return false;
                }
            }
        }

        return true;
    }
};
